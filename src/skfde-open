#!/bin/bash

set -euo pipefail

SKFDE_CONFIG_FILE="/etc/skfde.conf"
SKFDE_LUKS_KEYSLOT=""
SKFDE_DEFAULT_LUKS_KEYSLOT="3"
SKFDE_LUKS_DEV=""
SKFDE_RESPONSE=""
SKFDE_PASSPHRASE=""
SKFDE_TEST_PASSPHRASE=""

if [ -r "$SKFDE_CONFIG_FILE" ]; then
  . "$SKFDE_CONFIG_FILE"
else
  echo "Failed to read the default SKFDE configuration file '$SKFDE_CONFIG_FILE'"
  exit 1
fi

while getopts ":d:s:n:c:th" opt; do
  case "$opt" in
    c)
      SKFDE_CONFIG_FILE="$OPTARG"
      printf '%s\n' "INFO: Setting config file to '$SKFDE_CONFIG_FILE'."
        . "$SKFDE_CONFIG_FILE"
      ;;
    d)
      SKFDE_LUKS_DEV="$OPTARG"
      printf '%s\n' "INFO: Setting device to '$SKFDE_LUKS_DEV'."
      ;;
    s)
      if [ "$OPTARG" -gt -8 ] && [ "$OPTARG" -lt 8 ]; then
        SKFDE_LUKS_KEYSLOT="$OPTARG"
        printf '%s\n' "INFO: Setting LUKS keyslot to '$SKFDE_LUKS_KEYSLOT'."
      else
        printf '%s\n' "ERROR: Chosen LUKS keyslot '$SKFDE_LUKS_KEYSLOT' is invalid. Please choose valid LUKS keyslot number between '0-7'."
        exit 1
      fi
      ;;
    n)
      SKFDE_LUKS_NAME="$OPTARG"
      printf '%s\n' "INFO: Setting name to '$SKFDE_LUKS_NAME'."
      ;;
    t)
      SKFDE_TEST_PASSPHRASE="--test-passphrase"
      echo "INFO: Testing LUKS passphrase"
      ;;
    h)
      echo
      echo " -d <device>     : select an existing device"
      echo " -s <slot>       : select the LUKS keyslot"
      echo " -n <name>       : set the new encrypted volume name"
      echo " -c <file>       : select the skfde config file"
      echo " -t              : test LUKS passphrase"
      echo
      exit 0
      ;;
    \?)
      printf '%s\n' "ERROR: Invalid option: '$OPTARG'" >&2
      echo
      echo " -d <device>     : select an existing device"
      echo " -s <slot>       : select the LUKS keyslot"
      echo " -n <name>       : set the new encrypted volume name"
      echo " -c <file>       : select the skfde config file"
      echo " -t              : test LUKS passphrase"
      echo
      exit 1
      ;;
  esac
done

if [ -z "$SKFDE_LUKS_DEV" ]; then
  echo "ERROR: Device not selected. Please select an existing device using '-d' option."
  exit 1
elif [ ! -e "$SKFDE_LUKS_DEV" ]; then
  printf '%s\n' "ERROR: Selected device '$SKFDE_LUKS_DEV' doesn't exist."
  exit 1
elif [ ! -r "$SKFDE_LUKS_DEV" ] || [ ! -w "$SKFDE_LUKS_DEV" ]; then
  printf '%s\n' "ERROR: Selected device '$SKFDE_LUKS_DEV' isn't accessible for current user '$(whoami)'. Please execute this script as 'root'."
  exit 1
fi

if ! cryptsetup isLuks "$SKFDE_LUKS_DEV"; then
  printf '%s\n' "ERROR: Selected device '$SKFDE_LUKS_DEV' isn't a LUKS encrypted volume. Please select a valid device."
  exit 1
fi

if [ -z "$SKFDE_LUKS_NAME" ]; then
  printf '%s\n' "ERROR: Please set the new encrypted volume name using '-n' option."
  exit 1
fi

if [ "$SKFDE_LUKS_KEYSLOT" ]; then
  SKFDE_LUKS_KEYSLOT="--key-slot=$SKFDE_LUKS_KEYSLOT"
else
  SKFDE_LUKS_KEYSLOT="--key-slot=$SKFDE_DEFAULT_LUKS_KEYSLOT"
fi

if [ -z "$SKFDE_CHALLENGE" ]; then
  echo "ERROR: solokey challenge is empty. Check the $SKFDE_CONFIG_FILE file."
  exit 1
fi

if [ -z "$SKFDE_CREDENTIAL" ]; then
  echo "ERROR: solokey credential is empty. Check the $SKFDE_CONFIG_FILE file."
  exit 1
fi

if [ -z "$SKFDE_RESPONSE" ]; then
  read -s -p "Enter the SoloKey PIN: " PIN
  echo -e "\nRemember to press the SoloKey button if necessary"
  SKFDE_RESPONSE="$(echo -n ${PIN} | fido2luks print-secret $SKFDE_CREDENTIAL \
    --salt string:$SKFDE_CHALLENGE --pin --pin-source /dev/stdin 2>&1)"
  SKFDE_PASSPHRASE="$SKFDE_RESPONSE"
fi

if [ "$SKFDE_TEST_PASSPHRASE" ]; then
  printf '%s\n' " Passing '$SKFDE_PASSPHRASE' to 'cryptsetup'"
  printf '%s\n' "$SKFDE_PASSPHRASE" | cryptsetup luksOpen "$SKFDE_TEST_PASSPHRASE" "$SKFDE_LUKS_DEV" "$SKFDE_LUKS_KEYSLOT" 2>&1
  _res=$?
  if [ "$_res" -eq 0 ]; then
    printf '%s\n' " Device successfully opened"
    exit 0
  else
    printf '%s\n' " Failed to open the device $SKFDE_LUKS_DEV"
  fi
else
  printf '%s\n' " Passing '$SKFDE_PASSPHRASE' to 'cryptsetup'"
  printf '%s\n' "$SKFDE_PASSPHRASE" | cryptsetup luksOpen "$SKFDE_LUKS_DEV" "$SKFDE_LUKS_NAME" "$SKFDE_LUKS_KEYSLOT" 2>&1
  _res=$?
  if [ "$_res" -eq 0 ]; then
    printf '%s\n' " Device successfully opened as /dev/mapper/$SKFDE_LUKS_NAME"
    exit 0
  else
    printf '%s\n' " Failed to open the device $SKFDE_LUKS_DEV"
  fi
fi
